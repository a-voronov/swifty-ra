// MARK: Query

// All operators are left associative.
// Operator Precedense: high 0 -> low 4

// 0 : relation-name, inline-relation
// 1 : projection, selection, rename (columns), rename (relations), group, order by
// 2 : cross product, theta join, natural join, left outer join, right outer join, full outer join, left semi-join, right semi-join, anti semi-join, division
// 3 : intersection
// 4 : union, subtraction

// Illegal üò¢:
//infix operator œÄ
//infix operator œÉ
//infix operator œÑ

// Legal:
//infix operator ‚ç¥
//infix operator ‚Üê
//infix operator ‚Üí
//infix operator ‚à©
//infix operator ‚à™
//infix operator -
//infix operator ‚®Ø
//infix operator √∑
//infix operator ‚®ù
//infix operator ‚ãâ
//infix operator ‚ãä
//infix operator ‚ñ∑

// MARK: Projection

extension Query.ProjectionArgument: ExpressibleByStringLiteral  {
    public init(stringLiteral value: String) {
        self.init(attribute: value, expression: nil)
    }
}

infix operator <-: AssignmentPrecedence

public func <- (_ lhs: AttributeName, _ rhs: MemberExpression)  -> Query.ProjectionArgument { .init(attribute: lhs, expression: .member(rhs)) }
public func <- (_ lhs: AttributeName, _ rhs: BooleanExpression) -> Query.ProjectionArgument { .init(attribute: lhs, expression: .boolean(rhs)) }
public func <- (_ lhs: AttributeName, _ rhs: NumericExpression) -> Query.ProjectionArgument { .init(attribute: lhs, expression: .numeric(rhs)) }
public func <- (_ lhs: AttributeName, _ rhs: StringExpression)  -> Query.ProjectionArgument { .init(attribute: lhs, expression: .string(rhs)) }
